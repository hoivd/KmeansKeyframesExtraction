import numpy as np
from tqdm import tqdm
from logger import _setup_logger
import config
import torch

logger = _setup_logger(__name__, config.LOG_LEVEL)

def kmeans_init(data: torch.Tensor, device="cuda"):
    """
    Kh·ªüi t·∫°o t√¢m c·ª•m theo c√°ch greedy minimization SSE
    data: torch.Tensor [N, D], dtype=float64
    device: "cuda" ho·∫∑c "cpu"

    return:
        clusters: torch.LongTensor [N] (nh√£n c·ª•m)
        centers:  torch.Float64Tensor [K, D] (t√¢m c·ª•m)
    """

    logger.debug("üîπ In the process of initialising the center")

    data = data.to(device, dtype=torch.float64)   # ƒë·∫£m b·∫£o data ·ªü GPU float64
    n = data.shape[0]
    sqrt_n = int(torch.sqrt(torch.tensor(n, dtype=torch.float64, device=device)).item())

    centers = []
    label = None

    # pick init_center
    while len(centers) < sqrt_n:
        sse_min = float("inf")
        join_center = data[0]

        # tqdm ƒë·ªÉ quan s√°t ti·∫øn tr√¨nh duy·ªát qua n ƒëi·ªÉm
        for i in tqdm(range(n), desc=f"Selecting center {len(centers)+1}/{sqrt_n}"):

            # copy c√°c t√¢m hi·ªán t·∫°i
            if len(centers) > 0:
                current_centers = torch.stack(centers, dim=0)  # [m, D]
                # ki·ªÉm tra tr√°nh ch·ªçn l·∫°i t√¢m ƒë√£ c√≥
                if torch.any(torch.all(data[i] == current_centers, dim=1)):
                    continue
                center = torch.cat([current_centers, data[i].unsqueeze(0)], dim=0)
            else:
                center = data[i].unsqueeze(0)

            # ---- ph√¢n c·ª•m t·∫°m th·ªùi ----
            distances = torch.cdist(data, center, p=2)  # [N, m+1]
            cluster_labels = torch.argmin(distances, dim=1)

            # ---- t√≠nh SSE ----
            min_distances = distances[torch.arange(n, device=device), cluster_labels]
            sse = min_distances.sum().item()

            if sse < sse_min:
                sse_min = sse
                join_center = data[i]
                label = cluster_labels.clone()

        centers.append(join_center)

    # Chuy·ªÉn v·ªÅ tensor torch lu√¥n
    clusters = label  # torch.LongTensor [N]
    centers = torch.stack(centers, dim=0)  # torch.Float64Tensor [sqrt_n, D]

    logger.info("Kh·ªüi t·∫°o c·ª•m v√† t√¢m c·ª•m ban ƒë·∫ßu th√†nh c√¥ng")
    logger.debug(f"C√°c c·ª•m ban ƒë·∫ßu {clusters}")
    logger.debug(f"C√°c t√¢m ban ƒë·∫ßu {centers}")

    return clusters, centers

